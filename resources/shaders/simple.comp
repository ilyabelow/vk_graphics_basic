#version 430

layout( local_size_x = 64 ) in;

layout( push_constant ) uniform params {
  uint len;
} PC;

layout(std430, binding = 0) buffer a 
{
    float A[];
};

layout(std430, binding = 1) buffer b
{
    float B[];
};

const int w_r = 3; // because shared memory must be known in compile-time


void main() 
{
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= PC.len) {
        return;
    }
    float sum = 0;
    for (int i = -w_r; i <= w_r; i++) {
        int shifted = int(idx) + i;
        if (shifted >= 0 && shifted < PC.len) {
            sum += A[shifted];
        }
    }
    B[idx] = A[idx] - sum / (w_r*2+1);

}